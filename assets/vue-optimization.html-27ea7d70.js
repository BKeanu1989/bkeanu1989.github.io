import{_ as a,p as n,q as e,a1 as s}from"./framework-52ca566e.js";const t={},o=s(`<h1 id="vue-performance-optimizations" tabindex="-1"><a class="header-anchor" href="#vue-performance-optimizations" aria-hidden="true">#</a> Vue Performance Optimizations</h1><h2 id="v-memo" tabindex="-1"><a class="header-anchor" href="#v-memo" aria-hidden="true">#</a> v-memo</h2><p>kinda like reacts. useEffect, but here without an dependency array, we get the same functionality like v-once</p><div class="language-vue line-numbers-mode" data-ext="vue"><pre class="language-vue"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span> <span class="token attr-name">v-memo</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>[count]<span class="token punctuation">&quot;</span></span><span class="token attr-name">&quot;</span><span class="token punctuation">&gt;</span></span>
    {{ count }} - {{ msg }}
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>in this example the paragraph only rerenders, when count changes.</p><h2 id="v-once" tabindex="-1"><a class="header-anchor" href="#v-once" aria-hidden="true">#</a> v-once</h2><p>only renders once. applicable for long list, which do not change.</p>`,7),c=[o];function i(p,r){return n(),e("div",null,c)}const u=a(t,[["render",i],["__file","vue-optimization.html.vue"]]);export{u as default};
